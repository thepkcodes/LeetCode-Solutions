Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

Solution:

Time Complexity: O(n)
Space Complexity: O(1)

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(head == NULL || head -> next == NULL)
            return head;
        int count = 1;
        ListNode* dummy = new ListNode(0, head);
        ListNode* prev = dummy;
        while(count < left) {
            prev = head;
            head = head -> next;
            count++;
        }
        ListNode* a_tail = prev;
        ListNode* b_tail = head;
        prev = NULL;
        ListNode* curr = head;
        int total = right - left + 1;
        for(int i = 0; i < total; i++) {
            ListNode* next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
        }
        a_tail -> next = prev;
        b_tail -> next = curr;
        return dummy -> next;
    }
};
