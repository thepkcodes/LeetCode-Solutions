Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Solution:

Time Complexity: O(log n)
Space Complexity: O(1)

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int beg = 0;
        int end = nums.size() - 1;
        int leftIndex = -1;
        int rightIndex = -1;
        while(beg <= end) {
            int mid = (beg +  end) / 2;
            if(nums[mid] > target) {
                end = mid - 1;
            }
            else if(nums[mid] < target) {
                beg = mid + 1;
            }
            else {
                leftIndex = mid;
                end = mid - 1;
            }
        }
        beg = 0;
        end = nums.size() - 1;
        while(beg <= end) {
            int mid = (beg +  end) / 2;
            if(nums[mid] > target) {
                end = mid - 1;
            }
            else if(nums[mid] < target) {
                beg = mid + 1;
            }
            else {
                rightIndex = mid;
                beg = mid + 1;
            }
        }
        vector<int> ans;
        ans.push_back(leftIndex);
        ans.push_back(rightIndex);
        
        return ans;
    }
};
