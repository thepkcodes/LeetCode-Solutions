Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".

Example 1:

Input: s = "abcde", words = ["a","bb","acd","ace"]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: "a", "acd", "ace".

Example 2:

Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
Output: 2

Constraints:

1 <= s.length <= 5 * 104
1 <= words.length <= 5000
1 <= words[i].length <= 50
s and words[i] consist of only lowercase English letters.

Solution:

Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
public:
    int numMatchingSubseq(string s, vector<string>& words) {
        int n = words.size();
        unordered_map<char, vector<string>> map;
        for(int i = 0; i < n; i++) {
            map[words[i][0]].push_back(words[i]);
        }
        int ans = 0;
        for(int i = 0; i < s.size(); i++) {
            char x = s[i];
            if(map.find(x) != map.end()) {
                vector<string> temp = map[x];
                map.erase(x);
                for(int j = 0; j < temp.size(); j++) {
                    if(temp[j].size() == 1)
                        ans++;
                    else
                        map[temp[j][1]].push_back(temp[j].substr(1));
                }
            }
        }
        return ans;
    }
};
