Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

Example 1:

Input: s = "egg", t = "add"
Output: true

Example 2:

Input: s = "foo", t = "bar"
Output: false

Example 3:

Input: s = "paper", t = "title"
Output: true 

Constraints:

1 <= s.length <= 5 * 104
t.length == s.length
s and t consist of any valid ascii character.

Solution:

Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.size() != t.size())
            return false;
        
        unordered_map<char, char>map;
        set<char> set;
        
        for(int i = 0; i < s.size(); i++) {
            char set1 = s[i];
            char set2 = t[i];
            if(map.find(set1) != map.end()) {
                if(map[set1] != set2) {
                    return false;
                }
            }
            else {
                if(set.find(set2) != set.end())
                    return false;
                map[set1] = set2;
                set.insert(set2);
            }
        }
        return true;
    }
};
